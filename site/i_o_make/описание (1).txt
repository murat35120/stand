css
1) все в блоке  main
2) включаем flex
3) помним о значении по умолчанию и создаем класс по назначению
top - верх
bottom - низ
title - заголовок
content - вся информация страницы
section - основные блоки информации
centre  - щсновная часть
article - статья
paragraph - парпаграф
clause - пункт
menu - меню
table - таблица
line - ряд
(flex-direction, justify-content, align-items, flex-wra)
тут создается каркас страницы
4) flex-basis: - зпдаем размеры блоков
5) padding, margin
6) text - параметры текста
7) fon - картинка повторяющаяся, 
8) рисунки - вставляем через dataset и стили
9) wars - переменные на все 
10) animation - кномки, переходы
11) управление элементами, открыть/закрыть
12) медиазапросы  justify-content - в зависимости от размера окна 

html
1) каркас - набор блоков div
2) data-temp, data-id   заготовки элеменов страницы для копирования и вставки
3) ///все родители имеют классы - по типу flex
4) для управления показом,  элементы имеют data-displey или  data-visibility
5) для вывода(результат функции) данных data-write
6) для чтения (отправки серверу) данных используем data-read
7) реакция клик data-click
8) изменение значения (нажатие кнопок кравиатуры и тд) data-edit
9) рисунки data-picture
10) кнопки data-click - совпадает с имененм рисунка

js
1) определяем страницу (роль) как префикс  при сохранения в локалстораж
2) abonent - только то, что нужно сохранять, копируем в localstorages и обратно (при старте)
3) links - ссылки на элементы интерфейса
4) manager - хранение всех используемых для взаимодействия данных, которые не нужно сохранять
5) comm - связь с серверами
6) arrs - заготовленные массивы данных 
6) click - функции обаботки кнопок
6) answer - функции обработки ответов сервера
7) control - все функции
8) start - операции перед стартом страницы
9) слушатели
10) создаваемые программно блоки получают data-id и ссылки в массивах links
11) при отправке по очереди перебираем места хранения по именам полей
поля страницы, поля таблицы на стронице,  abonent, manager
12) при получении - раздаем значения в том же порядке
13) при отправке используем заготовленные команды со списком полей  commands
14) при ошибке регистрации вываливаемся в окно регистрации - остальное скрывается
15) кнопка выйти - очищает только свое
16) justify-content - в зависимости от размера окна 
17) движение фона на постоянное растояние


данные для показа = таблицы
1) храним в двух массивах
- первый названия колонок и их формат  name_format  - название массива формата
    если имен нет th не создаем
    если формата нет, создаем его по умолчанию, текст, середина
- второй значения  name - название массива
2) создаем таблицы
3) строки нумеруем (в строке)
4) таблицу именуем по объекту
5) таблица всегда имеет образ в links
6) при изменении в arrs - перерисовываем таблицу
7) при изменении в таблице - меняем  в links
8) изменения колонок, строк, сортировка - все в arrs
9) заголовки th, поля td
10) работаем только с готовым массивом
11)