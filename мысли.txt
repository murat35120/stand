операции
- настройка состояния
- изменение состояния
- регистрацтия изменений
- регистрация времени = интервалов? количество? последовательность?
- регистрация проверок = хранение, поиск редактирование
- регистрация результатов проверок
- способы сверки ожидания и факта
- веб интерфейс


выполнение теста
проверочная единица
- текущее состояние = массив
- воздействие - команда
- результат - последовательность по N каналам

состояние - 2 части
состояние ног - проверяем стендом
состояние внутренне = настройки контроллера
как это описать?

команда изменения внутреннего состояния -  время (событие) до которого действует
варианты
 - время, до отмены, по внешнему воздействию

способы подтверждения перехода в другое состояние!!!!
- лог событий
- состояние  выходов
- подтверждение команды

команда
- имя, параметры
- ответ контроллера
- лог
- состояние ног
- изменение состояния  -  что это???

статика
перед отправкой команды, проверяю исходное состояние
после выполнения проверки проверяю новое состояние

динамика
исходное состояние,
последовательность воздействий и
изменение состояний
= нобор кадров с заданным интервалом и/или событий

- исходное состояние
- команда
- лог событий со стартом от первой команды
- вычисляем и регистрирует интервалы от старта или от события

в базе храним единичные проверки

внутреннее состояние, двав варианта
1) хранится как лог событий, который приводит контроллер в нужное состояние, можно удалить событие или добавить новое
2) массив флагов - правильно
- кнопка принять текущее состояние (это при импорте проверки)

база
- команды
- проверки
- список внутренних состочяний
- список состояний выходов
- список состояний входов


команды создаются по шаблону = конструктор
- имя
- параметры
- ответ контроллера на команду, регистрируем состояние контроллера
- событие в логе, регистрируем состояние контроллера
- изменение состояния ног, регистрируем состояние контроллера
- событие или пауза до регистрации состояния
- старт следующей команды
последняя команда стоп


как хранить команды, проверки, результаты, ????
1) проверка (автоматическая запись последующих состояний при установленном первом)
- массив состояний (3 массива = внутреннее, входы, выходы)
- команда,  имя и параметры
- лог событий
- пауза до окончания операции
- массив состояний
2) макрокопроверка
- массив пар проверка и пауза после проверки (автоматическая запись последующих состояний при установленном первом)
Как регистрировать отклонение времени?? от предидущей, события, старта макропрпроверки
- смотри ниже
Как удобнее регистрировать пики и вспышки?  
- нужна функция анализатор или 3-4 таких функции, считаем количество переходов, интервалы между переходами и тд.
Что проверять и как это назначить?
- состояния
-  пики, вспышки - смотри функцию анализатор
3) команды  - это функции хранятся в модулях на сервере
4) результаты - ок не_ок  для каждой проверке

проверка живет до конкретного события (времени) !!!!!

сравнение пиков и вспышек с шаблоном
используем массив пар значенией, состояние/длительность
сравниваем с образцом по последовательности состояний и отклонению длительностей

требования к приложению
Нужны команды
1) запрос текущего состояния всех внешних входов и выходов
2) старт/стоп логов - если нужно приложению
3) лог событий онлайн - опрос 5 раз/сек
4) изменение состояния ног - онлайн
5) нужно создать функцию приведения контроллера в исходное состояние
6) функция определения текущего состояния контроллера


(13:42:33) Nick Karpow/ILogic: [
  {
    "command": "set_out",
    "out": 1,
    "vaalue": 1
  },
  {
    "command": "get_in",
    "in": 1
  },
  {
    "command": "advanced_send",
    "data_b64": "CAIAAAAA",
    "data_hex": "080200000000"
  }
]
(13:42:39) Nick Karpow/ILogic: [
  {
    "event":"in_state",
    "in":1,
    "value":0
  },
  {
    "event":"in_state_canged",
    "in": 1,
    "new_value":0
  },
  {
    "event":"advanced_responce",
    "state":"ok",
    "data_b64": "CAIAAAAA",
    "data_hex": "080200000000"
    
  }
]

Структура сервера
1) вебсокет АПИ приложения
2) вебсокет управления сервером - окно админа
3) TCP облачный сервер для хранения проверок и результатов - база mysql

как записать= оформить и хранить  ожидания - смотри веб редактор

старт / стоп состояния
- значение или игнорировать,  в старте и стопе
- ели при старте и стопе  игнорировать, значит контролируем в стопе такое  же состояние что и при старте
- если значение только в старте или стопе, значит контролируем  только старт или стоп

как хранить
1) старт/стоп - объект JSON
2) команда(название)сигналы / параметры  - объект JSON
3) логи  - объект JSON
4) сигналы  - объект JSON









